#version 330 core

struct Material {
    sampler2D diffuse;
    sampler2D specular;
    sampler2D emission;
    float shininess;
}; 

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

uniform vec3 viewPos;
uniform Material material;
uniform Light light;

out vec4 FragColor;

void main()
{
		// ambient
//	vec3 ambient = lightColor * material.ambient;
//	vec3 ambient = vec3(0.5) * material.ambient;
//	vec3 ambient = light.ambient * material.ambient;
//	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords)).rgb;
	vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));
  	
    	// diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
//	vec3 diffuse = lightColor * (diff * material.diffuse);
//	vec3 diffuse = light.diffuse * (diff * material.diffuse);
//	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords)).rgb;
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));
    
    	// specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
//	vec3 specular = lightColor * (spec * material.specular);
//	vec3 specular = light.specular * (spec * material.specular);
//	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
//	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords)).rgb;
	vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));

		// emission
//	vec3 emission = texture(material.emission, TexCoords).rgb;

//	vec3 result = ambient + diffuse + specular + emission;
	vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 0.1);
}
